c# OOPS:
========

Why did we declare the method as public, and not static, like in the examples from the C# Methods Chapter?

	The reason is simple: A static method can be accessed without creating an object of the class, while public methods can only be accessed by objects.
	
Modifier		Description
public			The code is accessible for all classes
private			The code is only accessible within the same class
protected		The code is accessible within the same class, or in a class that is inherited from that class. 
internal		The code is only accessible within its own assembly, but not from another assembly. 

There's also two combinations: protected internal and private protected.

Why Access Modifiers?
	To control the visibility of class members (the security level of each individual class and class member).

	To achieve "Encapsulation" - which is the process of making sure that "sensitive" data is hidden from users. This is done by declaring fields as private. 
	
	
Note: By default, all members of a class are private if you don't specify an access modifier:

Example
	class Car
	{
	  string model;  // private
	  string year;   // private
	}
	
------------------------
Properties and Encapsulation:
=============================

	Before we start to explain properties, you should have a basic understanding of "Encapsulation".

	The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. To achieve this, you must:

	declare fields/variables as private
	provide public get and set methods, through properties, to access and update the value of a private field

Properties:
----------	
	private variables can only be accessed within the same class (an outside class has no access to it). However, sometimes we need to access them - and it can be done with properties.

	A property is like a combination of a variable and a method, and it has two methods: a get and a set method:
	
	class Person
	{
	  private string name; // field

	  public string Name   // property
	  {
		get { return name; }   // get method
		set { name = value; }  // set method
	  }
	}
	
	Example explained:
	
		The Name property is associated with the name field. It is a good practice to use the same name for both the property and the private field, but with an uppercase first letter.

		The get method returns the value of the variable name.

		The set method assigns a value to the name variable. The value keyword represents the value we assign to the property.
		
	Sample : 
	
	class Person
	{
	  private string name; // field
	  public string Name   // property
	  {
		get { return name; }
		set { name = value; }
	  }
	}

	class Program
	{
	  static void Main(string[] args)
	  {
		Person myObj = new Person();
		myObj.Name = "Liam";
		Console.WriteLine(myObj.Name); // Liam
	  }
	}
	
Automatic Properties (Short Hand):
----------------------------------

	C# also provides a way to use short-hand / automatic properties, where you do not have to define the field for the property, and you only have to write get; and set; inside the property.

	The following example will produce the same result as the example above. The only difference is that there is less code:

	Example
		Using automatic properties:

		class Person
		{
		  public string Name  // property
		  { get; set; }
		}

		class Program
		{
		  static void Main(string[] args)
		  {
			Person myObj = new Person();
			myObj.Name = "Liam";
			Console.WriteLine(myObj.Name);
		  }
		}
		 
 


Why Encapsulation?
------------------

	Better control of class members (reduce the possibility of yourself (or others) to mess up the code).
	Fields can be made read-only (if you only use the get method), or write-only (if you only use the set method).
	Flexible: the programmer can change one part of the code without affecting other parts.
	Increased security of data.
	
=======================================================================

Inheritance (Derived and Base Class):
------------------------------------
	In C#, it is possible to inherit fields and methods from one class to another. We group the "inheritance concept" into two categories:

	Derived Class (child) - the class that inherits from another class
	Base Class (parent) - the class being inherited from
	To inherit from a class, use the : symbol.

	In the example below, the Car class (child) inherits the fields and methods from the Vehicle class (parent):
	
	class Vehicle  // base class (parent) 
	{
	  public string brand = "Ford";  // Vehicle field
	  public void honk()             // Vehicle method 
	  {                    
		Console.WriteLine("Tuut, tuut!");
	  }
	}

	class Car : Vehicle  // derived class (child)
	{
	  public string modelName = "Mustang";  // Car field
	}

	class Program
	{
	  static void Main(string[] args)
	  {
		// Create a myCar object
		Car myCar = new Car();

		// Call the honk() method (From the Vehicle class) on the myCar object
		myCar.honk();

		// Display the value of the brand field (from the Vehicle class) and the value of the modelName from the Car class
		Console.WriteLine(myCar.brand + " " + myCar.modelName);
	  }
	}
	
	Why And When To Use "Inheritance"?
		- It is useful for code reusability: reuse fields and methods of an existing class when you create a new class.
		
	The sealed Keyword:
	------------------
		If you don't want other classes to inherit from a class, use the sealed keyword:
		If you try to access a sealed class, C# will generate an error:

		sealed class Vehicle 
		{
		  ...
		}

		class Car : Vehicle 
		{
		  ...
		}
		
		The error message will be something like this:
			'Car': cannot derive from sealed type 'Vehicle'
			
=======================================================================
Polymorphism and Overriding Methods:
------------------------------------
	Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.

	Inheritance lets us inherit fields and methods from another class. 
	Polymorphism uses those methods to perform different tasks. 
	This allows us to perform a single action in different ways.

	For example: 
	think of a base class called Animal that has a method called animalSound().
	Derived classes of Animals could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, and the cat meows, etc.):

									
	class Animal  // Base class (parent) 
	{
	  public void animalSound() 
	  {
		Console.WriteLine("The animal makes a sound");
	  }
	}

	class Pig : Animal  // Derived class (child) 
	{
	  public void animalSound() 
	  {
		Console.WriteLine("The pig says: wee wee");
	  }
	}

	class Dog : Animal  // Derived class (child) 
	{
	  public void animalSound() 
	  {
		Console.WriteLine("The dog says: bow wow");
	  }
	}

Now we can create Pig and Dog objects and call the animalSound() method on both of them:

	class Animal  // Base class (parent) 
	{
	  public void animalSound() 
	  {
		Console.WriteLine("The animal makes a sound");
	  }
	}

	class Pig : Animal  // Derived class (child) 
	{
	  public void animalSound() 
	  {
		Console.WriteLine("The pig says: wee wee");
	  }
	}

	class Dog : Animal  // Derived class (child) 
	{
	  public void animalSound() 
	  {
		Console.WriteLine("The dog says: bow wow");
	  }
	}

	class Program 
	{
	  static void Main(string[] args) 
	  {
		Animal myAnimal = new Animal();  // Create a Animal object
		Animal myPig = new Pig();  // Create a Pig object
		Animal myDog = new Dog();  // Create a Dog object

		myAnimal.animalSound();
		myPig.animalSound();
		myDog.animalSound();
	  }
	}
	
The output will be:

	The animal makes a sound
	The animal makes a sound
	The animal makes a sound
	
	Not The Output I Was Looking For
	The output from the example above was probably not what you expected. That is because the base class method overrides the derived class method, when they share the same name.

	However, C# provides an option to override the base class method, by adding the virtual keyword to the method inside the base class, and by using the override keyword for each derived class methods:
	
	class Animal  // Base class (parent) 
	{
	  public virtual void animalSound() 
	  {
		Console.WriteLine("The animal makes a sound");
	  }
	}

	class Pig : Animal  // Derived class (child) 
	{
	  public override void animalSound() 
	  {
		Console.WriteLine("The pig says: wee wee");
	  }
	}

	class Dog : Animal  // Derived class (child) 
	{
	  public override void animalSound() 
	  {
		Console.WriteLine("The dog says: bow wow");
	  }
	}

	class Program 
	{
	  static void Main(string[] args) 
	  {
		Animal myAnimal = new Animal();  // Create a Animal object
		Animal myPig = new Pig();  // Create a Pig object
		Animal myDog = new Dog();  // Create a Dog object

		myAnimal.animalSound();
		myPig.animalSound();
		myDog.animalSound();
	  }
	} 
	 
	 
	The output will be:

	The animal makes a sound
	The pig says: wee wee
	The dog says: bow wow
	
======================================================================================================

Abstract Classes and Methods:
----------------------------

	Data abstraction is the process of hiding certain details and showing only essential information to the user.
	Abstraction can be achieved with either abstract classes or interfaces (which you will learn more about in the next chapter).

	The abstract keyword is used for classes and methods:

	Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).

	Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the derived class (inherited from).
	An abstract class can have both abstract and regular methods:

		abstract class Animal 
		{
		  public abstract void animalSound();
		  public void sleep() 
		  {
			Console.WriteLine("Zzz");
		  }
		}
	 
	 
	From the example above, it is not possible to create an object of the Animal class:

	Animal myObj = new Animal(); // Will generate an error (Cannot create an instance of the abstract class or interface 'Animal')

	To access the abstract class, it must be inherited from another class. Let's convert the Animal class we used in the Polymorphism chapter to an abstract class.
	
	// Abstract class
	abstract class Animal
	{
	  // Abstract method (does not have a body)
	  public abstract void animalSound();
	  // Regular method
	  public void sleep()
	  {
		Console.WriteLine("Zzz");
	  }
	}

	// Derived class (inherit from Animal)
	class Pig : Animal
	{
	  public override void animalSound()
	  {
		// The body of animalSound() is provided here
		Console.WriteLine("The pig says: wee wee");
	  }
	}

	class Program
	{
	  static void Main(string[] args)
	  {
		Pig myPig = new Pig(); // Create a Pig object
		myPig.animalSound();  // Call the abstract method
		myPig.sleep();  // Call the regular method
	  }
	}
	
	Why And When To Use Abstract Classes and Methods?
		To achieve security - hide certain details and only show the important details of an object.
		
======================================================================================================

Interfaces:
-----------
	Another way to achieve abstraction in C#, is with interfaces.

	An interface is a completely "abstract class", which can only contain abstract methods and properties (with empty bodies):
	
	// interface
	interface Animal 
	{
	  void animalSound(); // interface method (does not have a body)
	  void run(); // interface method (does not have a body)
	}
	
	It is considered good practice to start with the letter "I" at the beginning of an interface, as it makes it easier for yourself and others to remember that it is an interface and not a class.

	By default, members of an interface are abstract and public.

	Note: Interfaces can contain properties and methods, but not fields.
	
	To access the interface methods, the interface must be "implemented" (kinda like inherited) by another class. To implement an interface, use the : symbol (just like with inheritance). The body of the interface method is provided by the "implement" class. Note that you do not have to use the override keyword when implementing an interface:

	Example
	// Interface
	interface IAnimal 
	{
	  void animalSound(); // interface method (does not have a body)
	}

	// Pig "implements" the IAnimal interface
	class Pig : IAnimal 
	{
	  public void animalSound() 
	  {
		// The body of animalSound() is provided here
		Console.WriteLine("The pig says: wee wee");
	  }
	}

	class Program 
	{
	  static void Main(string[] args) 
	  {
		Pig myPig = new Pig();  // Create a Pig object
		myPig.animalSound();
	  }
	} 
	 

	Notes on Interfaces:
	Like abstract classes, interfaces cannot be used to create objects (in the example above, it is not possible to create an "IAnimal" object in the 
		Program class).
	Interface methods do not have a body - the body is provided by the "implement" class.
	On implementation of an interface, you must override all of its methods.
	Interfaces can contain properties and methods, but not fields/variables.
	Interface members are by default abstract and public.
	An interface cannot contain a constructor (as it cannot be used to create objects).
	
	Why And When To Use Interfaces?
	1) To achieve security - hide certain details and only show the important details of an object (interface).

	2) C# does not support "multiple inheritance" (a class can only inherit from one base class). However, it can be achieved with interfaces, because the class can implement multiple interfaces.
	
Multiple Interfaces
	To implement multiple interfaces, separate them with a comma:
	
	interface IFirstInterface 
	{
	  void myMethod(); // interface method
	}

	interface ISecondInterface 
	{
	  void myOtherMethod(); // interface method
	}

	// Implement multiple interfaces
	class DemoClass : IFirstInterface, ISecondInterface 
	{
	  public void myMethod() 
	  {
		Console.WriteLine("Some text..");
	  }
	  public void myOtherMethod() 
	  {
		Console.WriteLine("Some other text...");
	  }
	}

	class Program 
	{
	  static void Main(string[] args)
	  {
		DemoClass myObj = new DemoClass();
		myObj.myMethod();
		myObj.myOtherMethod();
	  }
	}
======================================================================================================

Enums:
------

	An enum is a special "class" that represents a group of constants (unchangeable/read-only variables).

	To create an enum, use the enum keyword (instead of class or interface), and separate the enum items with a comma:

	ExampleGet your own C# Server
		enum Level 
		{
		  Low,
		  Medium,
		  High
		}
	You can access enum items with the dot syntax:

	Level myVar = Level.Medium;
	Console.WriteLine(myVar);
	Enum is short for "enumerations", which means "specifically listed".

	Enum inside a Class
	You can also have an enum inside a class:

	Example:
	
		class Program
		{
		  enum Level
		  {
			Low,
			Medium,
			High
		  }
		  static void Main(string[] args)
		  {
			Level myVar = Level.Medium;
			Console.WriteLine(myVar);
		  }
		}
		The output will be:
		Medium
	---------------------------------------
	Enum Values:
	
	By default, the first item of an enum has the value 0. The second has the value 1, and so on.

	To get the integer value from an item, you must explicitly convert the item to an int:

	Example
	enum Months
	{
	  January,    // 0
	  February,   // 1
	  March,      // 2
	  April,      // 3
	  May,        // 4
	  June,       // 5
	  July        // 6
	}

	static void Main(string[] args)
	{
	  int myNum = (int) Months.April;
	  Console.WriteLine(myNum);
	}
	The output will be:
	3
	----------------------------------------
	You can also assign your own enum values, and the next items will update their numbers accordingly:

	Example
	enum Months
	{
	  January,    // 0
	  February,   // 1
	  March=6,    // 6
	  April,      // 7
	  May,        // 8
	  June,       // 9
	  July        // 10
	}

	static void Main(string[] args)
	{
	  int myNum = (int) Months.April;
	  Console.WriteLine(myNum);
	}
	The output will be:
	7
	----------------------------
	Enum in a Switch Statement:
	
	Enums are often used in switch statements to check for corresponding values:

	Example
	enum Level 
	{
	  Low,
	  Medium,
	  High
	}

	static void Main(string[] args) 
	{
	  Level myVar = Level.Medium;
	  switch(myVar) 
	  {
		case Level.Low:
		  Console.WriteLine("Low level");
		  break;
		case Level.Medium:
		   Console.WriteLine("Medium level");
		  break;
		case Level.High:
		  Console.WriteLine("High level");
		  break;
	  }
	}
	The output will be:
	Medium level
	
	Why And When To Use Enums?
		Use enums when you have values that you know aren't going to change, like month days, days, colors, deck of cards, etc.